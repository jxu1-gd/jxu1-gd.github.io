{"version":3,"file":"static/js/527.f9f9c868.chunk.js","mappings":"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","sources":["ChatModule.js","service/ChatService.js"],"sourcesContent":["import cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport ChooseOptionWindow from './components/choose-option-window/ChooseOptionWindow';\nimport GenericMessage from './components/generic-message/GenericMessage';\nimport Hoop from './components/hoop/Hoop';\nimport Chat from './components/svg/Chat';\nimport IconButtonChat from './components/icon-button-chat/IconButtonChat';\nimport ChatService from './service/ChatService';\nimport './styles/chat-module.scss';\nimport CssImport from './util/CssImport';\nimport GatewayHttpClient from './util/GatewayHttpClient';\n\nclass ChatModule extends PureComponent {\n    static propTypes = {\n        contextCls: PropTypes.string,\n        containerElement: PropTypes.object,\n        accountIdentifier: PropTypes.string,\n        accessToken: PropTypes.string,\n        email: PropTypes.string,\n        brand: PropTypes.string,\n        env: PropTypes.string,\n    };\n\n    state = {\n        shouldShowChooseOptionWindow: false,\n        shouldShowErrorPage: false,\n        shouldShowHoopWindow: false,\n        shouldShowMinimizedIconButton: false,\n    };\n\n    render() {\n        const { isDesignTokenApplied } = this.state;\n\n        return isDesignTokenApplied && this.renderContent();\n    }\n\n    componentDidMount() {\n        const { accessToken } = this.props;\n\n        if (accessToken) {\n            GatewayHttpClient.accessToken = accessToken;\n        }\n\n        this.setContainerElementStyle();\n        this.fetchConfig();\n        this.applyDesignToken();\n    }\n\n    componentWillUnmount() {\n        this.restoreContainerElementStyle();\n    }\n\n    renderContent() {\n        const {\n            shouldShowChooseOptionWindow,\n            shouldShowErrorPage,\n            shouldShowHoopWindow,\n            shouldShowMinimizedIconButton,\n        } = this.state;\n\n        return (\n            <>\n                {shouldShowMinimizedIconButton && this.renderIconButtonChat()}\n                {shouldShowChooseOptionWindow &&\n                    this.renderChooseOptionWindow()}\n                {shouldShowHoopWindow && this.renderHoopWindow()}\n                {shouldShowErrorPage && this.renderErrorPage()}\n            </>\n        );\n    }\n\n    renderSvgChat = () => <Chat contextCls=\"svg-container\" />;\n\n    renderIconButtonChat = () => {\n        return (\n            <IconButtonChat\n                renderSvg={this.renderSvgChat}\n                onClick={this.handleMinimizedIconBtnClick}\n            />\n        );\n    };\n\n    renderHoopWindow = () => {\n        const { chatConfigs } = this.state;\n        const { contextCls, ...restProps } = this.props;\n\n        return (\n            <Hoop\n                contextCls={cx(this.baseCls, contextCls)}\n                hoop={chatConfigs.hoop}\n                isLeaveMsgEnabled={chatConfigs.isLeaveAgentMessageEnabled}\n                {...restProps}\n                {...chatConfigs}\n            />\n        );\n    };\n\n    renderChooseOptionWindow = () => {\n        const { contextCls, ...restProps } = this.props;\n        const { chatConfigs } = this.state;\n\n        return (\n            <ChooseOptionWindow\n                contextCls={cx(this.baseCls, contextCls)}\n                ewt={chatConfigs.ewt}\n                {...restProps}\n                {...chatConfigs}\n            />\n        );\n    };\n\n    renderErrorPage = () => {\n        const { contextCls, ...restProps } = this.props;\n\n        return (\n            <GenericMessage\n                contextCls={cx(this.baseCls, contextCls)}\n                icon=\"WarningAlert\"\n                windowTitle=\"Chat with an agent\"\n                headText=\"There was a problem connecting to chat support\"\n                subText=\"Please try again later.\"\n                {...restProps}\n            />\n        );\n    };\n\n    handleMinimizedIconBtnClick = () => {\n        this.setState({\n            shouldShowMinimizedIconButton: false,\n        });\n        this.fetchConfig();\n    };\n\n    async fetchConfig() {\n        const newState = {};\n\n        try {\n            const chatConfig = await ChatService.getChatConfig();\n            const { isAgentOnline, isSuccess, errors, ...restConfig } =\n                chatConfig;\n            newState.chatConfigs = restConfig;\n\n            if (isAgentOnline) {\n                newState.shouldShowChooseOptionWindow = true;\n            } else {\n                newState.shouldShowHoopWindow = true;\n            }\n\n            if (!isSuccess) {\n                newState.shouldShowErrorPage = true;\n            }\n        } catch (e) {\n            newState.shouldShowErrorPage = true;\n        } finally {\n            this.setState(newState);\n        }\n    }\n\n    async applyDesignToken() {\n        try {\n            const { brand } = this.props;\n            await CssImport.import(brand);\n            this.setState({\n                isDesignTokenApplied: true,\n            });\n        } catch (e) {\n            console.debug(e.message);\n        }\n    }\n\n    setContainerElementStyle() {\n        const { containerElement } = this.props;\n\n        if (containerElement) {\n            this.setState({\n                originContainerElementPosition: containerElement.style.position,\n            });\n            containerElement.style.position = 'relative';\n        }\n    }\n\n    restoreContainerElementStyle() {\n        const { containerElement } = this.props;\n        const { originContainerElementPosition } = this.state;\n\n        if (containerElement && originContainerElementPosition) {\n            containerElement.style.position = originContainerElementPosition;\n        }\n    }\n\n    baseCls = 'web-chat-module';\n}\n\nexport default ChatModule;\n","import GatewayHttpClient from '../util/GatewayHttpClient';\n\nexport const chatUrls = {\n    getConfigUrl: '/v1/api/gbr/config',\n    leaveMessageUrl: '/v1/api/gbr/leaveagentmessage',\n};\nexport default {\n    async getChatConfig() {\n        const config = await GatewayHttpClient.get(chatUrls.getConfigUrl);\n\n        return config;\n    },\n    async leaveMessage(leaveMessageRequest) {\n        const resp = await GatewayHttpClient.post(\n            chatUrls.leaveMessageUrl,\n            leaveMessageRequest,\n        );\n\n        return resp;\n    },\n};\n"],"names":["ChatModule","state","shouldShowChooseOptionWindow","shouldShowErrorPage","shouldShowHoopWindow","shouldShowMinimizedIconButton","renderSvgChat","contextCls","renderIconButtonChat","renderSvg","onClick","handleMinimizedIconBtnClick","renderHoopWindow","chatConfigs","props","restProps","cx","baseCls","hoop","isLeaveMsgEnabled","isLeaveAgentMessageEnabled","renderChooseOptionWindow","ewt","renderErrorPage","icon","windowTitle","headText","subText","setState","fetchConfig","this","isDesignTokenApplied","renderContent","accessToken","GatewayHttpClient","setContainerElementStyle","applyDesignToken","restoreContainerElementStyle","newState","ChatService","chatConfig","isAgentOnline","isSuccess","errors","restConfig","brand","CssImport","console","debug","message","containerElement","originContainerElementPosition","style","position","PureComponent","chatUrls","getChatConfig","config","leaveMessage","leaveMessageRequest","resp"],"sourceRoot":""}