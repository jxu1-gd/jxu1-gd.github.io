{"version":3,"file":"static/js/614.c7f8964f.chunk.js","mappings":"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","sources":["reportWebVitals.js","service/ChatService.js","mock/ChatService/registerChatRoutes.js","mock/registerRoutes.js","ChatModule.js","bootstrap.js"],"sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            },\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import { get, post } from '@Green-Dot-Corporation/eureka-lib-fetch-utils';\n\nexport const chatUrls = {\n    getConfigUrl: '/v1/api/gbr/config',\n    leaveMessageUrl: '/v1/api/gbr/leaveagentmessage',\n};\nexport default {\n    async getChatConfig() {\n        const config = await get(chatUrls.getConfigUrl);\n\n        return config;\n    },\n    async leaveMessage(leaveMessageRequest) {\n        const resp = await post(chatUrls.leaveMessageUrl, leaveMessageRequest);\n\n        return resp;\n    },\n};\n","import { chatUrls } from '../../service/ChatService';\n\nconst registerChatRoutes = (server) => {\n    const serverConfig = server;\n\n    serverConfig.namespace = '/v1/api/gbr/';\n    const mockGetConfig = () => {\n        return {\n            hoop: '9AM-5PM',\n            isAgentOnline: true,\n            ewt: 10,\n            isLeaveAgentMessageEnabled: true,\n            leaveAgentMessage:\n                'Please leave a message and we will get back to you as soon as we can.',\n            userInactiveInterval: 10,\n            isSuccess: true,\n            errors: undefined,\n        };\n    };\n    serverConfig.get('config', mockGetConfig);\n    const mockLeaveMessage = () => {\n        return {\n            success: true,\n            errors: undefined,\n        };\n    };\n    serverConfig.post(chatUrls.leaveMessageUrl, mockLeaveMessage);\n};\n\nexport default registerChatRoutes;\n","import registerChatRoutes from './ChatService/registerChatRoutes';\n\nconst registerRoutes = (server) => {\n    // server.passthrough();\n    registerChatRoutes(server);\n};\n\nexport default registerRoutes;\n","import cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport ChooseOptionWindow from './components/choose-option-window/ChooseOptionWindow';\nimport GenericMessage from './components/generic-message/GenericMessage';\nimport Hoop from './components/hoop/Hoop';\nimport Chat from './components/svg/Chat';\nimport IconButtonChat from './components/icon-button-chat/IconButtonChat';\nimport ChatService from './service/ChatService';\nimport './styles/chat-module.scss';\n\nclass ChatModule extends PureComponent {\n    static propTypes = {\n        contextCls: PropTypes.string,\n        containerElement: PropTypes.object,\n        accountIdentifier: PropTypes.string,\n        email: PropTypes.string,\n        brand: PropTypes.string,\n        env: PropTypes.string,\n    };\n\n    state = {\n        shouldShowChooseOptionWindow: false,\n        shouldShowErrorPage: false,\n        shouldShowHoopWindow: false,\n        shouldShowMinimizedIconButton: false,\n        isLeaveMsgEnabled: false,\n    };\n\n    render() {\n        const {\n            shouldShowChooseOptionWindow,\n            shouldShowErrorPage,\n            shouldShowHoopWindow,\n            shouldShowMinimizedIconButton,\n        } = this.state;\n\n        return (\n            <>\n                {shouldShowMinimizedIconButton && this.renderIconButton()}\n                {shouldShowChooseOptionWindow &&\n                    this.renderChooseOptionWindow()}\n                {shouldShowHoopWindow && this.renderHoopWindow()}\n                {shouldShowErrorPage && this.renderErrorPage()}\n            </>\n        );\n    }\n\n    componentDidMount() {\n        this.setContainerElementStyle();\n        this.fetchConfig();\n    }\n\n    componentWillUnmount() {\n        this.restoreContainerElementStyle();\n    }\n\n    renderSvgChat = () => <Chat contextCls=\"svg-container\" />;\n\n    renderIconButton = () => {\n        return (\n            <IconButtonChat\n                renderSvg={this.renderSvgChat}\n                onClick={this.handleMinimizedIconBtnClick}\n            />\n        );\n    };\n\n    renderHoopWindow = () => {\n        const { isLeaveMsgEnabled } = this.state;\n\n        return (\n            <Hoop\n                isLeaveMsgEnabled={isLeaveMsgEnabled}\n                onCloseBtnClick={this.handleCloseBtnClick}\n            />\n        );\n    };\n\n    renderChooseOptionWindow = () => {\n        const { contextCls, ...restProps } = this.props;\n        const { chatConfigs } = this.state;\n\n        return (\n            <ChooseOptionWindow\n                contextCls={cx(this.baseCls, contextCls)}\n                {...restProps}\n                {...chatConfigs}\n                onCloseBtnClick={this.handleCloseBtnClick}\n            />\n        );\n    };\n\n    renderErrorPage = () => {\n        const { contextCls, ...restProps } = this.props;\n\n        return (\n            <GenericMessage\n                contextCls={cx(this.baseCls, contextCls)}\n                icon=\"WarningAlert\"\n                windowTitle=\"Chat With an agent\"\n                headText=\"There was a problem connecting to chat support\"\n                subText=\"Please try again later.\"\n                onCloseBtnClick={this.handleCloseBtnClick}\n                {...restProps}\n            />\n        );\n    };\n\n    handleCloseBtnClick = () => {\n        this.setState({\n            shouldShowMinimizedIconButton: true,\n            shouldShowChooseOptionWindow: false,\n            shouldShowErrorPage: false,\n            shouldShowHoopWindow: false,\n        });\n    };\n\n    handleMinimizedIconBtnClick = () => {\n        this.setState({\n            shouldShowMinimizedIconButton: false,\n        });\n        this.fetchConfig();\n    };\n\n    async fetchConfig() {\n        const newState = {};\n\n        try {\n            const chatConfig = await ChatService.getChatConfig();\n            const {\n                isAgentOnline,\n                isSuccess,\n                isLeaveAgentMessageEnabled,\n                errors,\n                ...restConfig\n            } = chatConfig;\n            newState.chatConfigs = restConfig;\n\n            if (isAgentOnline) {\n                newState.shouldShowChooseOptionWindow = true;\n            } else {\n                newState.shouldShowHoopWindow = true;\n                newState.isLeaveMsgEnabled = isLeaveAgentMessageEnabled;\n            }\n\n            if (!isSuccess) {\n                newState.shouldShowErrorPage = true;\n            }\n        } catch (e) {\n            newState.shouldShowErrorPage = true;\n        } finally {\n            this.setState(newState);\n        }\n    }\n\n    setContainerElementStyle() {\n        const { containerElement } = this.props;\n\n        if (containerElement) {\n            this.setState({\n                originContainerElementPosition: containerElement.style.position,\n            });\n            containerElement.style.position = 'relative';\n        }\n    }\n\n    restoreContainerElementStyle() {\n        const { containerElement } = this.props;\n        const { originContainerElementPosition } = this.state;\n\n        if (containerElement && originContainerElementPosition) {\n            containerElement.style.position = originContainerElementPosition;\n        }\n    }\n\n    baseCls = 'web-chat-module';\n}\n\nexport default ChatModule;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport initMirageServer from '@Green-Dot-Corporation/eureka-lib-mock-utils/src/initMirageServer';\nimport reportWebVitals from './reportWebVitals';\nimport registerRoutes from './mock/registerRoutes';\nimport ChatModule from './ChatModule';\nimport './styles/index.scss';\n\nif (\n    process.env.NODE_ENV === 'development' ||\n    process.env.NODE_ENV === 'production'\n) {\n    // Shutdown any existing instance of server to avoid multiple pretender\n    // instances error\n    if (window.server && typeof window.server.shutdown === 'function') {\n        window.server.shutdown();\n    }\n\n    // Create server and pass routes and other options\n    window.server = initMirageServer({\n        routes() {\n            registerRoutes(this);\n        },\n    });\n}\nconst rootElement = document.getElementById('root');\nconst root = ReactDOM.createRoot(rootElement);\nroot.render(\n    <React.StrictMode>\n        <div>\n            Test Widget Page, when invoke the wiget, we should expose the\n            ChatModule only and set the containerElement to which element in the\n            existing page\n        </div>\n        <ChatModule containerElement={rootElement} />\n    </React.StrictMode>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"names":["onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","chatUrls","get","config","server","serverConfig","namespace","hoop","isAgentOnline","ewt","isLeaveAgentMessageEnabled","leaveAgentMessage","userInactiveInterval","isSuccess","errors","undefined","post","success","registerChatRoutes","ChatModule","state","shouldShowChooseOptionWindow","shouldShowErrorPage","shouldShowHoopWindow","shouldShowMinimizedIconButton","isLeaveMsgEnabled","renderSvgChat","Chat","contextCls","renderIconButton","IconButtonChat","renderSvg","onClick","handleMinimizedIconBtnClick","renderHoopWindow","Hoop","onCloseBtnClick","handleCloseBtnClick","renderChooseOptionWindow","props","restProps","chatConfigs","ChooseOptionWindow","cx","baseCls","renderErrorPage","GenericMessage","icon","windowTitle","headText","subText","setState","fetchConfig","this","setContainerElementStyle","restoreContainerElementStyle","newState","ChatService","chatConfig","restConfig","containerElement","originContainerElementPosition","style","position","PureComponent","window","shutdown","initMirageServer","routes","registerRoutes","rootElement","document","getElementById","ReactDOM","render","reportWebVitals"],"sourceRoot":""}