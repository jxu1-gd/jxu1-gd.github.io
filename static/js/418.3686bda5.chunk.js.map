{"version":3,"file":"static/js/418.3686bda5.chunk.js","mappings":"2XAWMA,EAAgB,kBAAM,SAAC,IAAD,CAAMC,WAAW,mBACvCC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAgH0B,OAhH1BA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KAUFC,MAAQ,CACJC,8BAA8B,EAC9BC,qBAAqB,EACrBC,sBAAsB,EACtBC,+BAA+B,GAJ3B,EAwDRC,oBAAsB,WAClB,EAAKC,SAAS,CAAEF,+BAA+B,KAClD,EAEDG,4BAA8B,WAC1B,EAAKD,SAAS,CAAEF,+BAA+B,KAClD,EAwCDI,QAAU,oBAFT,OAES,8BA/FV,WACI,MAAqCC,KAAKC,MAAlCZ,EAAR,EAAQA,WAAea,GAAvB,YACA,EAKIF,KAAKT,MAJLC,EADJ,EACIA,6BACAC,EAFJ,EAEIA,oBAEAE,GAJJ,EAGID,qBAHJ,EAIIC,+BAEIQ,EAAgBH,KAAKT,MAArBY,YAGR,OAFAH,KAAKI,2BAEDT,GAEI,SAAC,IAAD,CACIU,UAAWjB,EACXkB,QAASN,KAAKF,8BAGfN,GAEH,SAAC,KAAD,wBACIH,WAAYkB,GAAAA,CAAGP,KAAKD,QAASV,IACzBa,GACAC,GAHR,IAIIK,gBAAiBR,KAAKJ,uBAGvBH,GAEH,SAAC,IAAD,CACIJ,WAAYkB,GAAAA,CAAGP,KAAKD,QAASV,GAC7BoB,KAAK,eACLC,YAAY,qBACZC,SAAS,iDACTC,QAAQ,6BAKT,qBAId,+BAED,WACIZ,KAAKa,gBACR,4DAUD,0FACI,IAYYC,GAXFC,EAAa,CACfC,KAAM,UACNF,aAAa,EACbG,IAAK,GACLC,0BAA0B,EAC1BC,kBACI,wEACJC,qBAAsB,GACtBC,SAAS,EACTC,YAAQC,IAEJT,YAAaO,EAAmCN,EAAnCM,QAAmCN,EAA1BO,OAAWE,GAZzC,OAYwDT,EAZxD,GAaAf,KAAKH,SAAS,CAAEM,YAAaqB,IAEzBV,EACAd,KAAKH,SAAS,CAAEL,8BAA8B,IAE9CQ,KAAKH,SAAS,CAAEH,sBAAsB,IAGrC2B,GACDrB,KAAKH,SAAS,CAAEJ,qBAAqB,IAE3C,MAAOgC,IAzBb,kGAVC,IAUD,sCA8BA,WACI,IAAQC,EAAqB1B,KAAKC,MAA1ByB,iBAEJA,IACAA,EAAiBC,MAAMC,SAAW,gBAEzC,EA9GCtC,CAAmBuC,EAAAA,eAmHzB","sources":["ChatModule.js"],"sourcesContent":["import cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport ChooseOptionWindow from './components/choose-option-window/ChooseOptionWindow';\nimport GenericMessage from './components/generic-message/GenericMessage';\nimport Chat from './components/svg/Chat';\nimport IconButtonChat from './components/icon-button-chat/IconButtonChat';\n\n// import ChatService from './service/ChatService';\nimport './styles/chat-module.scss';\n\nconst renderSvgChat = () => <Chat contextCls=\"svg-container\" />;\nclass ChatModule extends PureComponent {\n    static propTypes = {\n        contextCls: PropTypes.string,\n        containerElement: PropTypes.object,\n        accountIdentifier: PropTypes.string,\n        email: PropTypes.string,\n        brand: PropTypes.string,\n        env: PropTypes.string,\n    };\n\n    state = {\n        shouldShowChooseOptionWindow: false,\n        shouldShowErrorPage: false,\n        shouldShowHoopWindow: false,\n        shouldShowMinimizedIconButton: false,\n    };\n\n    render() {\n        const { contextCls, ...restProps } = this.props;\n        const {\n            shouldShowChooseOptionWindow,\n            shouldShowErrorPage,\n            shouldShowHoopWindow,\n            shouldShowMinimizedIconButton,\n        } = this.state;\n        const { chatConfigs } = this.state;\n        this.setContainerElementStyle();\n\n        if (shouldShowMinimizedIconButton) {\n            return (\n                <IconButtonChat\n                    renderSvg={renderSvgChat}\n                    onClick={this.handleMinimizedIconBtnClick}\n                />\n            );\n        } else if (shouldShowChooseOptionWindow) {\n            return (\n                <ChooseOptionWindow\n                    contextCls={cx(this.baseCls, contextCls)}\n                    {...restProps}\n                    {...chatConfigs}\n                    onCloseBtnClick={this.handleCloseBtnClick}\n                />\n            );\n        } else if (shouldShowErrorPage) {\n            return (\n                <GenericMessage\n                    contextCls={cx(this.baseCls, contextCls)}\n                    icon=\"WarningAlert\"\n                    windowTitle=\"Chat With an agent\"\n                    headText=\"There was a problem connecting to chat support\"\n                    subText=\"Please try again later.\"\n                />\n            );\n        } else if (shouldShowHoopWindow) {\n            // TODO: render HOOP window when ready\n            return <div />;\n        }\n\n        return <div />;\n    }\n\n    componentDidMount() {\n        this.fetchConfig();\n    }\n\n    handleCloseBtnClick = () => {\n        this.setState({ shouldShowMinimizedIconButton: true });\n    };\n\n    handleMinimizedIconBtnClick = () => {\n        this.setState({ shouldShowMinimizedIconButton: false });\n    };\n\n    async fetchConfig() {\n        try {\n            const chatConfig = {\n                hoop: '9AM-6PM',\n                agentOnline: true,\n                ewt: 10,\n                leaveAgentMessageEnabled: true,\n                leaveAgentMessage:\n                    'Please leave a message and we will get back to you as soon as we can.',\n                userInactiveInterval: 10,\n                success: true,\n                errors: undefined,\n            }; // await ChatService.getChatConfig();\n            const { agentOnline, success, errors, ...restConfig } = chatConfig;\n            this.setState({ chatConfigs: restConfig });\n\n            if (agentOnline) {\n                this.setState({ shouldShowChooseOptionWindow: true });\n            } else {\n                this.setState({ shouldShowHoopWindow: true });\n            }\n\n            if (!success) {\n                this.setState({ shouldShowErrorPage: true });\n            }\n        } catch (e) {\n            // this.setState({ shouldShowErrorPage: true });\n        }\n    }\n\n    setContainerElementStyle() {\n        const { containerElement } = this.props;\n\n        if (containerElement) {\n            containerElement.style.position = 'relative';\n        }\n    }\n\n    baseCls = 'web-chat-module';\n}\n\nexport default ChatModule;\n"],"names":["renderSvgChat","contextCls","ChatModule","state","shouldShowChooseOptionWindow","shouldShowErrorPage","shouldShowHoopWindow","shouldShowMinimizedIconButton","handleCloseBtnClick","setState","handleMinimizedIconBtnClick","baseCls","this","props","restProps","chatConfigs","setContainerElementStyle","renderSvg","onClick","cx","onCloseBtnClick","icon","windowTitle","headText","subText","fetchConfig","agentOnline","chatConfig","hoop","ewt","leaveAgentMessageEnabled","leaveAgentMessage","userInactiveInterval","success","errors","undefined","restConfig","e","containerElement","style","position","PureComponent"],"sourceRoot":""}