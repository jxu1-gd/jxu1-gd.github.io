{"version":3,"file":"static/js/123.803e736e.chunk.js","mappings":"iLAcA,EAdwB,SAACA,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MACjB,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/BJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,uCCNXQ,EACK,qBAGlB,EAAe,WACY,OAAD,sHACGC,EAAAA,EAAAA,IAAID,GADP,cACZE,EADY,yBAGXA,GAHW,8C,gMCIpBC,EAAgB,kBAAM,SAACC,EAAA,EAAD,CAAMC,WAAW,mBACvCC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAsG0B,OAtG1BA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KAUFC,MAAQ,CACJC,8BAA8B,EAC9BC,qBAAqB,EACrBC,sBAAsB,EACtBC,+BAA+B,GAJ3B,EAwDRC,oBAAsB,WAClB,EAAKC,SAAS,CAAEF,+BAA+B,KAClD,EAEDG,4BAA8B,WAC1B,EAAKD,SAAS,CAAEF,+BAA+B,KAClD,EA8BDI,QAAU,oBAFT,OAES,8BArFV,WACI,MAAqCC,KAAKC,MAAlCZ,EAAR,EAAQA,WAAea,GAAvB,YACA,EAKIF,KAAKT,MAJLC,EADJ,EACIA,6BACAC,EAFJ,EAEIA,oBAEAE,GAJJ,EAGID,qBAHJ,EAIIC,+BAEIQ,EAAgBH,KAAKT,MAArBY,YAGR,OAFAH,KAAKI,2BAEDT,GAEI,SAACU,EAAA,EAAD,CACIC,UAAWnB,EACXoB,QAASP,KAAKF,8BAGfN,GAEH,SAACgB,EAAA,GAAD,wBACInB,WAAYoB,GAAAA,CAAGT,KAAKD,QAASV,IACzBa,GACAC,GAHR,IAIIO,gBAAiBV,KAAKJ,uBAGvBH,GAEH,SAACkB,EAAA,EAAD,CACItB,WAAYoB,GAAAA,CAAGT,KAAKD,QAASV,GAC7BuB,KAAK,eACLC,YAAY,qBACZC,SAAS,iDACTC,QAAQ,6BAKT,qBAId,+BAED,WACIf,KAAKgB,gBACR,4DAUD,mHAEiCC,IAFjC,OAEcC,EAFd,OAGgBC,EAAgDD,EAAhDC,YAAaC,EAAmCF,EAAnCE,QAAmCF,EAA1BG,OAAWC,GAHjD,OAGgEJ,EAHhE,GAIQlB,KAAKH,SAAS,CAAEM,YAAamB,IAEzBH,EACAnB,KAAKH,SAAS,CAAEL,8BAA8B,IAE9CQ,KAAKH,SAAS,CAAEH,sBAAsB,IAGrC0B,GACDpB,KAAKH,SAAS,CAAEJ,qBAAqB,IAbjD,kDAgBQO,KAAKH,SAAS,CAAEJ,qBAAqB,IAhB7C,4GAVC,IAUD,sCAoBA,WACI,IAAQ8B,EAAqBvB,KAAKC,MAA1BsB,iBAEJA,IACAA,EAAiBC,MAAMC,SAAW,gBAEzC,EApGCnC,CAAmBoC,EAAAA,eAyGzB,IC/FA,IAAMC,EAAcC,SAASC,eAAe,QAC/BC,EAAAA,WAAoBH,GAC5BI,QACD,UAAC,eAAD,YACI,+KAKA,SAAC,EAAD,CAAYR,iBAAkBI,QAOtCK,K,qBCpCA,IAAIC,EAAIC,EAAQ,MAEdC,EAAQC,WAAaH,EAAEG,WACvBD,EAAQE,YAAcJ,EAAEI","sources":["reportWebVitals.js","service/ChatService.js","ChatModule.js","bootstrap.js","../node_modules/react-dom/client.js"],"sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            },\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import { get, post } from '@Green-Dot-Corporation/eureka-lib-fetch-utils';\n\nexport const chatUrls = {\n    getConfigUrl: '/v1/api/gbr/config',\n    leaveMessageUrl: '/v1/api/gbr/leaveagentmessage',\n};\nexport default {\n    async getChatConfig() {\n        const config = await get(chatUrls.getConfigUrl);\n\n        return config;\n    },\n    async leaveMessage(leaveMessageRequest) {\n        const resp = await post(chatUrls.leaveMessageUrl, leaveMessageRequest);\n\n        return resp;\n    },\n};\n","import cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport ChooseOptionWindow from './components/choose-option-window/ChooseOptionWindow';\nimport GenericMessage from './components/generic-message/GenericMessage';\nimport Chat from './components/svg/Chat';\nimport IconButtonChat from './components/icon-button-chat/IconButtonChat';\n\nimport ChatService from './service/ChatService';\nimport './styles/chat-module.scss';\n\nconst renderSvgChat = () => <Chat contextCls=\"svg-container\" />;\nclass ChatModule extends PureComponent {\n    static propTypes = {\n        contextCls: PropTypes.string,\n        containerElement: PropTypes.object,\n        accountIdentifier: PropTypes.string,\n        email: PropTypes.string,\n        brand: PropTypes.string,\n        env: PropTypes.string,\n    };\n\n    state = {\n        shouldShowChooseOptionWindow: false,\n        shouldShowErrorPage: false,\n        shouldShowHoopWindow: false,\n        shouldShowMinimizedIconButton: false,\n    };\n\n    render() {\n        const { contextCls, ...restProps } = this.props;\n        const {\n            shouldShowChooseOptionWindow,\n            shouldShowErrorPage,\n            shouldShowHoopWindow,\n            shouldShowMinimizedIconButton,\n        } = this.state;\n        const { chatConfigs } = this.state;\n        this.setContainerElementStyle();\n\n        if (shouldShowMinimizedIconButton) {\n            return (\n                <IconButtonChat\n                    renderSvg={renderSvgChat}\n                    onClick={this.handleMinimizedIconBtnClick}\n                />\n            );\n        } else if (shouldShowChooseOptionWindow) {\n            return (\n                <ChooseOptionWindow\n                    contextCls={cx(this.baseCls, contextCls)}\n                    {...restProps}\n                    {...chatConfigs}\n                    onCloseBtnClick={this.handleCloseBtnClick}\n                />\n            );\n        } else if (shouldShowErrorPage) {\n            return (\n                <GenericMessage\n                    contextCls={cx(this.baseCls, contextCls)}\n                    icon=\"WarningAlert\"\n                    windowTitle=\"Chat With an agent\"\n                    headText=\"There was a problem connecting to chat support\"\n                    subText=\"Please try again later.\"\n                />\n            );\n        } else if (shouldShowHoopWindow) {\n            // TODO: render HOOP window when ready\n            return <div />;\n        }\n\n        return <div />;\n    }\n\n    componentDidMount() {\n        this.fetchConfig();\n    }\n\n    handleCloseBtnClick = () => {\n        this.setState({ shouldShowMinimizedIconButton: true });\n    };\n\n    handleMinimizedIconBtnClick = () => {\n        this.setState({ shouldShowMinimizedIconButton: false });\n    };\n\n    async fetchConfig() {\n        try {\n            const chatConfig = await ChatService.getChatConfig();\n            const { agentOnline, success, errors, ...restConfig } = chatConfig;\n            this.setState({ chatConfigs: restConfig });\n\n            if (agentOnline) {\n                this.setState({ shouldShowChooseOptionWindow: true });\n            } else {\n                this.setState({ shouldShowHoopWindow: true });\n            }\n\n            if (!success) {\n                this.setState({ shouldShowErrorPage: true });\n            }\n        } catch (e) {\n            this.setState({ shouldShowErrorPage: true });\n        }\n    }\n\n    setContainerElementStyle() {\n        const { containerElement } = this.props;\n\n        if (containerElement) {\n            containerElement.style.position = 'relative';\n        }\n    }\n\n    baseCls = 'web-chat-module';\n}\n\nexport default ChatModule;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport initMirageServer from '@Green-Dot-Corporation/eureka-lib-mock-utils/src/initMirageServer';\nimport reportWebVitals from './reportWebVitals';\nimport registerRoutes from './mock/registerRoutes';\nimport ChatModule from './ChatModule';\nimport './styles/index.scss';\n\nif (process.env.NODE_ENV === 'development') {\n    // Shutdown any existing instance of server to avoid multiple pretender\n    // instances error\n    if (window.server && typeof window.server.shutdown === 'function') {\n        window.server.shutdown();\n    }\n\n    // Create server and pass routes and other options\n    window.server = initMirageServer({\n        routes() {\n            registerRoutes(this);\n        },\n    });\n}\nconst rootElement = document.getElementById('root');\nconst root = ReactDOM.createRoot(rootElement);\nroot.render(\n    <React.StrictMode>\n        <div>\n            Test Widget Page, when invoke the wiget, we should expose the\n            ChatModule only and set the containerElement to which element in the\n            existing page\n        </div>\n        <ChatModule containerElement={rootElement} />\n    </React.StrictMode>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n"],"names":["onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","chatUrls","get","config","renderSvgChat","Chat","contextCls","ChatModule","state","shouldShowChooseOptionWindow","shouldShowErrorPage","shouldShowHoopWindow","shouldShowMinimizedIconButton","handleCloseBtnClick","setState","handleMinimizedIconBtnClick","baseCls","this","props","restProps","chatConfigs","setContainerElementStyle","IconButtonChat","renderSvg","onClick","ChooseOptionWindow","cx","onCloseBtnClick","GenericMessage","icon","windowTitle","headText","subText","fetchConfig","ChatService","chatConfig","agentOnline","success","errors","restConfig","containerElement","style","position","PureComponent","rootElement","document","getElementById","ReactDOM","render","reportWebVitals","m","require","exports","createRoot","hydrateRoot"],"sourceRoot":""}