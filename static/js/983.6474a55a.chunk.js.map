{"version":3,"file":"static/js/983.6474a55a.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/regenerator/index.js","ChatModule.js"],"sourcesContent":["module.exports = require(\"regenerator-runtime\");\n","import cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport {\n    withTranslation,\n    initTranslations,\n} from '@Green-Dot-Corporation/eureka-lib-i18n-utils';\nimport ChooseOptionWindow from './components/choose-option-window/ChooseOptionWindow';\n\nimport GenericMessage from './components/generic-message/GenericMessage';\nimport Hoop from './components/hoop/Hoop';\nimport ChatService from './service/ChatService';\nimport './styles/chat-module.scss';\nimport CssImport from './util/CssImport';\nimport GatewayHttpClient from './util/GatewayHttpClient';\nimport TwilioService from './service/TwilioService';\n\ninitTranslations({\n    defaultTranslations: {\n        'en-US': () => import('./i18n/en-us.json'),\n    },\n    partnerId: 'walmart',\n    shouldLoadStrings: false,\n});\nclass ChatModule extends PureComponent {\n    static propTypes = {\n        contextCls: PropTypes.string,\n        containerElement: PropTypes.object,\n        accountIdentifier: PropTypes.string,\n        accessToken: PropTypes.string,\n        email: PropTypes.string,\n        brand: PropTypes.string,\n        applicationId: PropTypes.string,\n        env: PropTypes.string,\n        onChatWidgetClose: PropTypes.func,\n        i18n: PropTypes.object,\n        isI18nReady: PropTypes.bool,\n        prefixAPIUrl: PropTypes.string,\n    };\n\n    static defaultProps = { onChatWidgetClose: () => Promise.resolve() };\n\n    state = {\n        shouldShowChooseOptionWindow: false,\n        shouldShowErrorPage: false,\n        shouldShowHoopWindow: false,\n    };\n\n    render() {\n        const { isDesignTokenApplied } = this.state;\n        const { isI18nReady } = this.props;\n\n        return isDesignTokenApplied && isI18nReady && this.renderContent();\n    }\n\n    componentDidMount() {\n        const { accessToken, applicationId, prefixAPIUrl } = this.props;\n\n        if (accessToken) {\n            GatewayHttpClient.accessToken = accessToken;\n        }\n\n        if (applicationId) {\n            GatewayHttpClient.applicationId = applicationId;\n        }\n\n        if (prefixAPIUrl) {\n            GatewayHttpClient.prefixAPIUrl = prefixAPIUrl;\n        }\n\n        this.setContainerElementStyle();\n        this.fetchConfig();\n        this.applyDesignToken();\n    }\n\n    componentWillUnmount() {\n        this.restoreContainerElementStyle();\n        this.destoryClient();\n    }\n\n    renderContent() {\n        const {\n            shouldShowChooseOptionWindow,\n            shouldShowErrorPage,\n            shouldShowHoopWindow,\n        } = this.state;\n\n        return (\n            <>\n                {shouldShowChooseOptionWindow &&\n                    this.renderChooseOptionWindow()}\n                {shouldShowHoopWindow && this.renderHoopWindow()}\n                {shouldShowErrorPage && this.renderErrorPage()}\n            </>\n        );\n    }\n\n    renderHoopWindow = () => {\n        const { contextCls, ...restProps } = this.props;\n        const { chatConfigs } = this.state;\n\n        return (\n            <Hoop\n                contextCls={cx(this.baseCls, contextCls)}\n                hoop={chatConfigs.hoop}\n                isLeaveAgentMessageEnabled={\n                    chatConfigs.isLeaveAgentMessageEnabled\n                }\n                {...restProps}\n                {...chatConfigs}\n            />\n        );\n    };\n\n    renderChooseOptionWindow = () => {\n        const { contextCls, ...restProps } = this.props;\n        const { chatConfigs } = this.state;\n\n        return (\n            <ChooseOptionWindow\n                contextCls={cx(this.baseCls, contextCls)}\n                ewt={chatConfigs.ewt}\n                {...restProps}\n                {...chatConfigs}\n            />\n        );\n    };\n\n    renderErrorPage = () => {\n        const { contextCls, i18n, ...restProps } = this.props;\n        const windowTitle = i18n.getTranslation('chatModule.errorPage.title');\n        const headText = i18n.getTranslation('chatModule.errorPage.headText');\n        const subText = i18n.getTranslation('chatModule.errorPage.subText');\n\n        return (\n            <GenericMessage\n                contextCls={cx(this.baseCls, contextCls)}\n                icon=\"WarningAlert\"\n                windowTitle={windowTitle}\n                headText={headText}\n                subText={subText}\n                i18n={i18n}\n                {...restProps}\n            />\n        );\n    };\n\n    async fetchConfig() {\n        const newState = {};\n\n        try {\n            const chatConfig = await ChatService.getChatConfig();\n            const { isAgentOnline, isSuccess, errors, ...restConfig } =\n                chatConfig;\n            newState.chatConfigs = restConfig;\n\n            if (isAgentOnline === true) {\n                newState.shouldShowChooseOptionWindow = true;\n            } else if (isAgentOnline === false) {\n                newState.shouldShowHoopWindow = true;\n            } else {\n                newState.shouldShowErrorPage = true;\n            }\n        } catch (e) {\n            newState.shouldShowErrorPage = true;\n        } finally {\n            this.setState(newState);\n        }\n    }\n\n    async applyDesignToken() {\n        try {\n            const { brand } = this.props;\n            await CssImport.import(brand);\n            this.setState({\n                isDesignTokenApplied: true,\n            });\n        } catch (e) {\n            console.debug(e.message);\n        }\n    }\n\n    setContainerElementStyle() {\n        const { containerElement } = this.props;\n\n        if (containerElement) {\n            this.setState({\n                originContainerElementPosition: containerElement.style.position,\n            });\n            containerElement.style.position = 'relative';\n        }\n    }\n\n    restoreContainerElementStyle() {\n        const { containerElement } = this.props;\n        const { originContainerElementPosition } = this.state;\n\n        if (containerElement && originContainerElementPosition) {\n            containerElement.style.position = originContainerElementPosition;\n        }\n    }\n\n    destoryClient = async () => {\n        await TwilioService.destoryClient();\n    };\n\n    baseCls = 'web-chat-module';\n}\n\nexport default withTranslation(ChatModule);\n"],"names":["module","exports","initTranslations","defaultTranslations","partnerId","shouldLoadStrings","ChatModule","state","shouldShowChooseOptionWindow","shouldShowErrorPage","shouldShowHoopWindow","renderHoopWindow","props","contextCls","restProps","chatConfigs","cx","baseCls","hoop","isLeaveAgentMessageEnabled","renderChooseOptionWindow","ewt","renderErrorPage","i18n","windowTitle","getTranslation","headText","subText","icon","destoryClient","TwilioService","isDesignTokenApplied","this","isI18nReady","renderContent","accessToken","applicationId","prefixAPIUrl","GatewayHttpClient","setContainerElementStyle","fetchConfig","applyDesignToken","restoreContainerElementStyle","newState","ChatService","chatConfig","isAgentOnline","isSuccess","errors","restConfig","setState","brand","CssImport","console","debug","message","containerElement","originContainerElementPosition","style","position","PureComponent","defaultProps","onChatWidgetClose","Promise","resolve","withTranslation"],"sourceRoot":""}