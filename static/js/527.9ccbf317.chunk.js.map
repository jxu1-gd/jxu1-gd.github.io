{"version":3,"file":"static/js/527.9ccbf317.chunk.js","mappings":"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","sources":["ChatModule.js","service/ChatService.js"],"sourcesContent":["import cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport ChooseOptionWindow from './components/choose-option-window/ChooseOptionWindow';\nimport GenericMessage from './components/generic-message/GenericMessage';\nimport Hoop from './components/hoop/Hoop';\nimport Chat from './components/svg/Chat';\nimport IconButtonChat from './components/icon-button-chat/IconButtonChat';\nimport ChatService from './service/ChatService';\nimport WriteAMessage from './components/svg/WriteAMessage';\nimport LeaveMessage from './components/leave-message/LeaveMessage';\nimport './styles/chat-module.scss';\n\nclass ChatModule extends PureComponent {\n    static propTypes = {\n        contextCls: PropTypes.string,\n        containerElement: PropTypes.object,\n        accountIdentifier: PropTypes.string,\n        email: PropTypes.string,\n        brand: PropTypes.string,\n        env: PropTypes.string,\n    };\n\n    state = {\n        shouldShowChooseOptionWindow: false,\n        shouldShowErrorPage: false,\n        shouldShowHoopWindow: false,\n        shouldShowMinimizedIconButton: false,\n        shouldShowConnectingPage: false,\n        shouldShowLeaveMessagePage: false,\n    };\n\n    render() {\n        const {\n            shouldShowChooseOptionWindow,\n            shouldShowErrorPage,\n            shouldShowHoopWindow,\n            shouldShowMinimizedIconButton,\n            shouldShowConnectingPage,\n            shouldShowLeaveMessagePage,\n        } = this.state;\n\n        return (\n            <>\n                {shouldShowMinimizedIconButton && this.renderIconButton()}\n                {shouldShowChooseOptionWindow &&\n                    this.renderChooseOptionWindow()}\n                {shouldShowHoopWindow && this.renderHoopWindow()}\n                {shouldShowConnectingPage && this.renderConnectingPage()}\n                {shouldShowLeaveMessagePage && this.renderLeaveMessagePage()}\n                {shouldShowErrorPage && this.renderErrorPage()}\n            </>\n        );\n    }\n\n    componentDidMount() {\n        const { accountIdentifier } = this.props;\n        this.setContainerElementStyle();\n        this.fetchConfig();\n        this.isLoggedIn = !!accountIdentifier;\n    }\n\n    componentWillUnmount() {\n        this.restoreContainerElementStyle();\n    }\n\n    renderSvgChat = () => <Chat contextCls=\"svg-container\" />;\n\n    renderIconButton = () => {\n        return (\n            <IconButtonChat\n                renderSvg={this.renderSvgChat}\n                onClick={this.handleMinimizedIconBtnClick}\n            />\n        );\n    };\n\n    renderHoopWindow = () => {\n        const { chatConfigs } = this.state;\n        const { contextCls, ...restProps } = this.props;\n\n        return (\n            <Hoop\n                contextCls={cx(this.baseCls, contextCls)}\n                hoop={chatConfigs.hoop}\n                isLeaveMsgEnabled={chatConfigs.isLeaveAgentMessageEnabled}\n                onCloseBtnClick={this.handleCloseBtnClick}\n                {...restProps}\n                {...chatConfigs}\n            />\n        );\n    };\n\n    renderChooseOptionWindow = () => {\n        const { contextCls, ...restProps } = this.props;\n        const { chatConfigs } = this.state;\n\n        return (\n            <ChooseOptionWindow\n                contextCls={cx(this.baseCls, contextCls)}\n                ewt={chatConfigs.ewt}\n                isLoggedIn={this.isLoggedIn}\n                {...restProps}\n                {...chatConfigs}\n                onCloseBtnClick={this.handleCloseBtnClick}\n                onSupportOptionClick={this.handleSupportOptionClick}\n                onMessageOptionClick={this.handleMessageOptionClick}\n            />\n        );\n    };\n\n    renderErrorPage = () => {\n        const { contextCls, ...restProps } = this.props;\n\n        return (\n            <GenericMessage\n                contextCls={cx(this.baseCls, contextCls)}\n                icon=\"WarningAlert\"\n                windowTitle=\"Chat with an agent\"\n                headText=\"There was a problem connecting to chat support\"\n                subText=\"Please try again later.\"\n                onCloseBtnClick={this.handleCloseBtnClick}\n                {...restProps}\n            />\n        );\n    };\n\n    renderConnectingPage = () => {\n        const { contextCls, ...restProps } = this.props;\n\n        return (\n            <GenericMessage\n                contextCls={cx(\n                    this.baseCls,\n                    contextCls,\n                    'web-chat-generic-message--withNoSubText',\n                )}\n                shouldShowMinimizeBtn\n                renderIcon={() => <WriteAMessage />}\n                headText=\"Connecting you with a support agent.\n                Please wait.\"\n                onCloseBtnClick={this.handleCloseBtnClick}\n                onMinimizeBtnClick={this.handleMinimizeBtnClick}\n                {...restProps}\n            />\n        );\n    };\n\n    renderLeaveMessagePage = () => {\n        const { contextCls, ...restProps } = this.props;\n\n        return (\n            <LeaveMessage\n                contextCls={cx(this.baseCls, contextCls)}\n                shouldShowEmailInput={!this.isLoggedIn}\n                onCloseBtnClick={this.handleCloseBtnClick}\n                {...restProps}\n            />\n        );\n    };\n\n    handleCloseBtnClick = () => {\n        this.setState({\n            shouldShowMinimizedIconButton: true,\n            shouldShowChooseOptionWindow: false,\n            shouldShowErrorPage: false,\n            shouldShowHoopWindow: false,\n            shouldShowConnectingPage: false,\n            shouldShowLeaveMessagePage: false,\n        });\n    };\n\n    handleMinimizeBtnClick = () => {\n        this.setState({\n            shouldShowMinimizedIconButton: true,\n            shouldShowChooseOptionWindow: false,\n            shouldShowErrorPage: false,\n            shouldShowHoopWindow: false,\n            shouldShowConnectingPage: false,\n        });\n    };\n\n    handleMinimizedIconBtnClick = () => {\n        this.setState({\n            shouldShowMinimizedIconButton: false,\n        });\n        this.fetchConfig();\n    };\n\n    handleSupportOptionClick = () => {\n        if (this.isLoggedIn) {\n            this.setState({\n                shouldShowMinimizedIconButton: false,\n                shouldShowChooseOptionWindow: false,\n                shouldShowErrorPage: false,\n                shouldShowHoopWindow: false,\n                shouldShowConnectingPage: true,\n                shouldShowLeaveMessagePage: false,\n            });\n        } else {\n            window.location.href =\n                'https://secure.go2bank.com/account/auth/login';\n        }\n    };\n\n    handleMessageOptionClick = () => {\n        this.setState({\n            shouldShowMinimizedIconButton: false,\n            shouldShowChooseOptionWindow: false,\n            shouldShowErrorPage: false,\n            shouldShowHoopWindow: false,\n            shouldShowConnectingPage: false,\n            shouldShowLeaveMessagePage: true,\n        });\n    };\n\n    async fetchConfig() {\n        const newState = {};\n\n        try {\n            const chatConfig = await ChatService.getChatConfig();\n            const { isAgentOnline, isSuccess, errors, ...restConfig } =\n                chatConfig;\n            newState.chatConfigs = restConfig;\n\n            if (isAgentOnline) {\n                newState.shouldShowChooseOptionWindow = true;\n            } else {\n                newState.shouldShowHoopWindow = true;\n            }\n\n            if (!isSuccess) {\n                newState.shouldShowErrorPage = true;\n            }\n        } catch (e) {\n            newState.shouldShowErrorPage = true;\n        } finally {\n            this.setState(newState);\n        }\n    }\n\n    setContainerElementStyle() {\n        const { containerElement } = this.props;\n\n        if (containerElement) {\n            this.setState({\n                originContainerElementPosition: containerElement.style.position,\n            });\n            containerElement.style.position = 'relative';\n        }\n    }\n\n    restoreContainerElementStyle() {\n        const { containerElement } = this.props;\n        const { originContainerElementPosition } = this.state;\n\n        if (containerElement && originContainerElementPosition) {\n            containerElement.style.position = originContainerElementPosition;\n        }\n    }\n\n    baseCls = 'web-chat-module';\n}\n\nexport default ChatModule;\n","import { get, post } from '@Green-Dot-Corporation/eureka-lib-fetch-utils';\n\nexport const chatUrls = {\n    getConfigUrl: '/v1/api/gbr/config',\n    leaveMessageUrl: '/v1/api/gbr/leaveagentmessage',\n};\nexport default {\n    async getChatConfig() {\n        const config = await get(chatUrls.getConfigUrl);\n\n        return config;\n    },\n    async leaveMessage(leaveMessageRequest) {\n        const resp = await post(chatUrls.leaveMessageUrl, leaveMessageRequest);\n\n        return resp;\n    },\n};\n"],"names":["ChatModule","state","shouldShowChooseOptionWindow","shouldShowErrorPage","shouldShowHoopWindow","shouldShowMinimizedIconButton","shouldShowConnectingPage","shouldShowLeaveMessagePage","renderSvgChat","contextCls","renderIconButton","renderSvg","onClick","handleMinimizedIconBtnClick","renderHoopWindow","chatConfigs","props","restProps","cx","baseCls","hoop","isLeaveMsgEnabled","isLeaveAgentMessageEnabled","onCloseBtnClick","handleCloseBtnClick","renderChooseOptionWindow","ewt","isLoggedIn","onSupportOptionClick","handleSupportOptionClick","onMessageOptionClick","handleMessageOptionClick","renderErrorPage","icon","windowTitle","headText","subText","renderConnectingPage","shouldShowMinimizeBtn","renderIcon","onMinimizeBtnClick","handleMinimizeBtnClick","renderLeaveMessagePage","shouldShowEmailInput","setState","fetchConfig","window","location","href","this","accountIdentifier","setContainerElementStyle","restoreContainerElementStyle","newState","ChatService","chatConfig","isAgentOnline","isSuccess","errors","restConfig","containerElement","originContainerElementPosition","style","position","PureComponent","chatUrls","getChatConfig","get","config","leaveMessage","leaveMessageRequest","post","resp"],"sourceRoot":""}